{"version":3,"file":"static/js/573.01e267bd.chunk.js","mappings":"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","sources":["components/form-input/form-input.component.jsx","routes/payment-form/payment-form.styles.jsx","components/address-form/address-form.component.jsx","routes/payment-form/payment-form.component.jsx"],"sourcesContent":["import \"./form-input.styles.scss\";\nconst FormInput = ({ label, ...otherProps }) => {\n  return (\n    <div className=\"group\">\n      <input className=\"form-input\" {...otherProps} />\n      <label\n        className={`${\n          otherProps.value.length ? \"shrink\" : \"\"\n        } form-input-label`}\n      >\n        {label}\n      </label>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import styled from \"styled-components\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\n\nexport const PaymentFormContainer = styled.div`\n  margin: 0px auto 50px auto;\n  width: 40%;\n  display: flex;\n  flex-direction: column;\n  direction:rtl;\n\n  @media (max-width: 768px) {\n    margin: 0px auto 50px auto;\n    width: 80%;\n  }\n`;\n\nexport const FormContainer = styled.form`\n  min-width: 200px;\n  button {\n    margin-top: 30px;\n    margin-left: auto;\n  }\n  span {\n    color: red;\n    display: block;\n    margin-top: 15px;\n  }\n  @media (max-width: 768px) {\n    min-width: 90%;\n\n    button {\n      margin-top: 30px;\n      width: 100%;\n    }\n  }\n`;\n\nexport const CardElementContainer = styled(CardElement)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border: 1px solid #ccc;\n  height: 50px;\n  padding: 10px;\n  margin-top: 5px;\n`;\n","import { useState, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CartContext } from \"../../contexts/cart.context\";\nimport { selectUserAddress } from \"../../store/user/user.selector\";\nimport { setUserAddress } from \"../../store/user/user.action\";\nimport Button from \"../button/button.component\";\nimport \"./address-form.styles.scss\";\nimport FormInput from \"../form-input/form-input.component\";\n\nconst defaultFormFields = {\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  address: \"\",\n};\n\nconst AddressForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { firstName, lastName, phone, address } = formFields;\n  const userAddress = useSelector(selectUserAddress);\n  const [isAddressAdded, setIsAddressAdded] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n  const AddressAddedHandler = () => {\n    setIsAddressAdded(false);\n    dispatch(setUserAddress({ ...defaultFormFields }));\n  };\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    dispatch(setUserAddress({ ...formFields }));\n    setIsAddressAdded(true);\n  };\n  const { cartTotal } = useContext(CartContext);\n  return (\n    <div className=\"address-form-container\">\n      <div className=\"checkout-summary\">\n        <h5 className=\"summary-heading\">اطلاعات خرید</h5>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">\n          محصولات\n            <span><span>{cartTotal}</span><span>تومان</span></span>\n          </li>\n          <li className=\"list-group-item\">\n          هزینه حمل و نقل\n            <span><span>{cartTotal ? 150 : 0}</span><span>تومان</span></span>\n          </li>\n          <li className=\"list-group-item\">\n            <div>\n              <strong>مبلغ کل</strong>\n            </div>\n            <span>\n              <strong><span>{cartTotal + (cartTotal ? 150 : 0)}</span><span>تومان</span></strong>\n            </span>\n          </li>\n        </ul>\n      </div>\n      <div className=\"address-form\">\n        <h5 className=\"billing-heading\">نشانی تحویل گیرنده</h5>\n        <div className=\"mb-4\">\n          {!isAddressAdded ? (\n            <form onSubmit={handleSubmit}>\n              <FormInput\n                label=\"نام\"\n                type=\"text\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={handleChange}\n                required\n              />\n              <FormInput\n                label=\"نام خانوادگی\"\n                name=\"lastName\"\n                type=\"text\"\n                value={lastName}\n                onChange={handleChange}\n                required\n              />\n              <FormInput\n                label=\"نشانی\"\n                name=\"address\"\n                type=\"address\"\n                value={address}\n                onChange={handleChange}\n                required\n              />\n              <FormInput\n                label=\"شماره موبایل\"\n                name=\"phone\"\n                type=\"phone\"\n                value={phone}\n                onChange={handleChange}\n                required\n              />\n              <Button>اضافه کردن آدرس</Button>\n            </form>\n          ) : (\n            <div className=\"currentAddressContainer\">\n              <h3>آدرس فعلی</h3>\n              <div className=\"currentAddress\">\n                {userAddress\n                  ? <div className=\"currentAddresss\"><span>{userAddress.firstName}</span> <span>{userAddress.lastName}</span><span>{userAddress.address}</span> <span> {userAddress.phone}</span></div>\n                  : \"هیچ آدرسی اضافه نشد\"}\n              </div>\n              <Button onClick={AddressAddedHandler}>ویرایش آدرس</Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddressForm;\n","import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport {\n  PaymentFormContainer,\n  FormContainer,\n  CardElementContainer,\n} from \"./payment-form.styles\";\nimport Button from \"../../components/button/button.component\";\nimport { CartContext } from \"../../contexts/cart.context\";\nimport { useContext, useState } from \"react\";\nimport { selectCurrentUser } from \"../../store/user/user.selector\";\nimport { selectUserAddress } from \"../../store/user/user.selector\";\nimport Toast from \"../../components/additional-components/toast/toast.component\";\nimport AddressForm from \"../../components/address-form/address-form.component\";\nimport { OrderContext } from \"../../contexts/orders.context\";\nimport { Fragment } from \"react\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nconst PaymentForm = () => {\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n  const { cartTotal, updateCartItemsReducer, cartItems } =\n    useContext(CartContext);\n  const { addTransactionToOrders } = useContext(OrderContext);\n  const currentUser = useSelector(selectCurrentUser);\n  const userAddress = useSelector(selectUserAddress);\n  const [showToast, setshowToast] = useState(false);\n  const [error, setError] = useState(null);\n  const [isTransactionInProcess, setTransactionInProcess] = useState(false);\n\n  const Error_Messages = [\n    { color: \"red\", message: \"سبد خالی است لطفا موارد را به سبد خرید اضافه کنید\" },\n    { color: \"red\", message: \"لطفا آدرس تحویل را وارد کنید\" },\n    { color: \"red\", message: \"پرداخت ناموفق. لطفا دوباره تلاش کنید.\" },\n    {\n      color: \"red\",\n      message: \"جزئیات کارت پیدا نشد. لطفا جزئیات معتبر وارد کنید.\",\n    },\n    {\n      color: \"green\",\n      message:\n        \"پرداخت با موفقیت انجام شد. از شما بابت خرید از ما ممنونیم. در حال تغییر مسیر به صفحه سفارشات...\",\n    },\n  ];\n  const closeToast = () => {\n    setTimeout(() => {\n      setshowToast(false);\n      setError(null);\n    }, 5000);\n  };\n  const paymentHandler = async (e) => {\n    e.preventDefault();\n    if (cartTotal === 0) {\n      setshowToast(true);\n      setError(Error_Messages[0]);\n      closeToast();\n      return;\n    }\n    if (!userAddress) {\n      setshowToast(true);\n      setError(Error_Messages[1]);\n      closeToast();\n      return;\n    }\n    setTransactionInProcess(true);\n    if (!stripe || !elements) return;\n    try {\n      const response = await fetch(\n        \"/.netlify/functions/create-payment-intent\",\n        {\n          method: \"post\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            amount: (cartTotal + (cartTotal ? 150 : 0)) * 100,\n          }),\n        }\n      ).then((res) => {\n        console.log(res);\n        return res.json();\n      });\n\n      const cardDetails = elements.getElement(CardElement);\n\n      const {\n        paymentIntent: { client_secret },\n      } = response;\n\n      const paymentResult = await stripe.confirmCardPayment(client_secret, {\n        payment_method: {\n          card: cardDetails,\n          billing_details: {\n            name: currentUser.displayName,\n            email: currentUser.email,\n          },\n        },\n      });\n      if (paymentResult.error) {\n        if (paymentResult.error.message === \"Your card number is incomplete.\")\n          setError(Error_Messages[3]);\n        else setError(Error_Messages[2]);\n        setshowToast(true);\n        closeToast();\n      } else if (paymentResult.paymentIntent.status === \"succeeded\") {\n        const payment_id = paymentResult.paymentIntent.id;\n        const transaction = {\n          id: payment_id,\n          items: cartItems,\n          amount: cartTotal + (cartTotal ? 150 : 0),\n          date: `${new Date()}`,\n          address: userAddress,\n        };\n        addTransactionToOrders(transaction);\n        setshowToast(true);\n        setError(Error_Messages[4]);\n        setTimeout(() => {\n          navigate(\"/orders\");\n        }, 5000);\n        closeToast();\n        updateCartItemsReducer([]);\n      }\n      setTransactionInProcess(false);\n    } catch (error) {\n      setshowToast(true);\n      setError(Error_Messages[3]);\n      setTransactionInProcess(false);\n      closeToast();\n    }\n  };\n  return (\n    <Fragment>\n      <AddressForm />\n      <PaymentFormContainer>\n        <FormContainer onSubmit={paymentHandler}>\n          <h3>پرداخت کارت اعتباری:</h3>\n          <CardElementContainer />\n          {isTransactionInProcess ? (\n            <Button disabled={isTransactionInProcess}>\n              <Spinner />\n            </Button>\n          ) : (\n            <Button disabled={isTransactionInProcess}>الان پرداخت کن</Button>\n          )}\n        </FormContainer>\n        {showToast && <Toast color={error.color} message={error.message} />}\n      </PaymentFormContainer>\n    </Fragment>\n  );\n};\n\nexport default PaymentForm;\n"],"names":["_ref","label","otherProps","_jsxs","className","children","_jsx","concat","value","length","PaymentFormContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormContainer","form","_templateObject2","CardElementContainer","CardElement","_templateObject3","defaultFormFields","firstName","lastName","phone","address","AddressForm","formFields","setFormFields","useState","userAddress","useSelector","selectUserAddress","isAddressAdded","setIsAddressAdded","dispatch","useDispatch","handleChange","event","name","target","cartTotal","useContext","CartContext","Button","onClick","AddressAddedHandler","setUserAddress","onSubmit","async","preventDefault","FormInput","type","onChange","required","PaymentForm","navigate","useNavigate","stripe","useStripe","elements","useElements","updateCartItemsReducer","cartItems","addTransactionToOrders","OrderContext","currentUser","selectCurrentUser","showToast","setshowToast","error","setError","isTransactionInProcess","setTransactionInProcess","Error_Messages","color","message","closeToast","setTimeout","Fragment","e","response","fetch","method","headers","body","JSON","stringify","amount","then","res","console","log","json","cardDetails","getElement","paymentIntent","client_secret","paymentResult","confirmCardPayment","payment_method","card","billing_details","displayName","email","status","transaction","id","items","date","Date","disabled","Spinner","Toast"],"sourceRoot":""}